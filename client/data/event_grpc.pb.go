// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendEventClient is the client API for SendEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendEventClient interface {
	SendForceStartEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendStartEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendKillEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendOnHoldEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendOffHoldEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendOnIceEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendOffIceEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendMarkAsSuccessEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
	SendMarkAsFailureEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error)
}

type sendEventClient struct {
	cc grpc.ClientConnInterface
}

func NewSendEventClient(cc grpc.ClientConnInterface) SendEventClient {
	return &sendEventClient{cc}
}

func (c *sendEventClient) SendForceStartEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendForceStartEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendStartEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendStartEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendKillEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendKillEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendOnHoldEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendOnHoldEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendOffHoldEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendOffHoldEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendOnIceEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendOnIceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendOffIceEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendOffIceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendMarkAsSuccessEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendMarkAsSuccessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEventClient) SendMarkAsFailureEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRes, error) {
	out := new(SendEventRes)
	err := c.cc.Invoke(ctx, "/data.SendEvent/SendMarkAsFailureEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendEventServer is the server API for SendEvent service.
// All implementations must embed UnimplementedSendEventServer
// for forward compatibility
type SendEventServer interface {
	SendForceStartEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendStartEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendKillEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendOnHoldEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendOffHoldEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendOnIceEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendOffIceEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendMarkAsSuccessEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	SendMarkAsFailureEvent(context.Context, *SendEventReq) (*SendEventRes, error)
	mustEmbedUnimplementedSendEventServer()
}

// UnimplementedSendEventServer must be embedded to have forward compatible implementations.
type UnimplementedSendEventServer struct {
}

func (UnimplementedSendEventServer) SendForceStartEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForceStartEvent not implemented")
}
func (UnimplementedSendEventServer) SendStartEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStartEvent not implemented")
}
func (UnimplementedSendEventServer) SendKillEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKillEvent not implemented")
}
func (UnimplementedSendEventServer) SendOnHoldEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnHoldEvent not implemented")
}
func (UnimplementedSendEventServer) SendOffHoldEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffHoldEvent not implemented")
}
func (UnimplementedSendEventServer) SendOnIceEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnIceEvent not implemented")
}
func (UnimplementedSendEventServer) SendOffIceEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffIceEvent not implemented")
}
func (UnimplementedSendEventServer) SendMarkAsSuccessEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarkAsSuccessEvent not implemented")
}
func (UnimplementedSendEventServer) SendMarkAsFailureEvent(context.Context, *SendEventReq) (*SendEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarkAsFailureEvent not implemented")
}
func (UnimplementedSendEventServer) mustEmbedUnimplementedSendEventServer() {}

// UnsafeSendEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendEventServer will
// result in compilation errors.
type UnsafeSendEventServer interface {
	mustEmbedUnimplementedSendEventServer()
}

func RegisterSendEventServer(s grpc.ServiceRegistrar, srv SendEventServer) {
	s.RegisterService(&SendEvent_ServiceDesc, srv)
}

func _SendEvent_SendForceStartEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendForceStartEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendForceStartEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendForceStartEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendStartEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendStartEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendStartEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendStartEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendKillEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendKillEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendKillEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendKillEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendOnHoldEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendOnHoldEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendOnHoldEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendOnHoldEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendOffHoldEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendOffHoldEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendOffHoldEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendOffHoldEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendOnIceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendOnIceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendOnIceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendOnIceEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendOffIceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendOffIceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendOffIceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendOffIceEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendMarkAsSuccessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendMarkAsSuccessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendMarkAsSuccessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendMarkAsSuccessEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEvent_SendMarkAsFailureEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEventServer).SendMarkAsFailureEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.SendEvent/SendMarkAsFailureEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEventServer).SendMarkAsFailureEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SendEvent_ServiceDesc is the grpc.ServiceDesc for SendEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.SendEvent",
	HandlerType: (*SendEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendForceStartEvent",
			Handler:    _SendEvent_SendForceStartEvent_Handler,
		},
		{
			MethodName: "SendStartEvent",
			Handler:    _SendEvent_SendStartEvent_Handler,
		},
		{
			MethodName: "SendKillEvent",
			Handler:    _SendEvent_SendKillEvent_Handler,
		},
		{
			MethodName: "SendOnHoldEvent",
			Handler:    _SendEvent_SendOnHoldEvent_Handler,
		},
		{
			MethodName: "SendOffHoldEvent",
			Handler:    _SendEvent_SendOffHoldEvent_Handler,
		},
		{
			MethodName: "SendOnIceEvent",
			Handler:    _SendEvent_SendOnIceEvent_Handler,
		},
		{
			MethodName: "SendOffIceEvent",
			Handler:    _SendEvent_SendOffIceEvent_Handler,
		},
		{
			MethodName: "SendMarkAsSuccessEvent",
			Handler:    _SendEvent_SendMarkAsSuccessEvent_Handler,
		},
		{
			MethodName: "SendMarkAsFailureEvent",
			Handler:    _SendEvent_SendMarkAsFailureEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
