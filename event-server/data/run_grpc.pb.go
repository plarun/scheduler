// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobStatusClient is the client API for JobStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobStatusClient interface {
	GetJobRunStatus(ctx context.Context, in *GetJobRunStatusReq, opts ...grpc.CallOption) (*GetJobRunStatusRes, error)
	GetJobRunHistory(ctx context.Context, in *GetJobRunHistoryReq, opts ...grpc.CallOption) (*GetJobRunHistoryRes, error)
	GetJobDefinition(ctx context.Context, in *GetJilReq, opts ...grpc.CallOption) (*GetJilRes, error)
}

type jobStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewJobStatusClient(cc grpc.ClientConnInterface) JobStatusClient {
	return &jobStatusClient{cc}
}

func (c *jobStatusClient) GetJobRunStatus(ctx context.Context, in *GetJobRunStatusReq, opts ...grpc.CallOption) (*GetJobRunStatusRes, error) {
	out := new(GetJobRunStatusRes)
	err := c.cc.Invoke(ctx, "/data.JobStatus/GetJobRunStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobStatusClient) GetJobRunHistory(ctx context.Context, in *GetJobRunHistoryReq, opts ...grpc.CallOption) (*GetJobRunHistoryRes, error) {
	out := new(GetJobRunHistoryRes)
	err := c.cc.Invoke(ctx, "/data.JobStatus/GetJobRunHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobStatusClient) GetJobDefinition(ctx context.Context, in *GetJilReq, opts ...grpc.CallOption) (*GetJilRes, error) {
	out := new(GetJilRes)
	err := c.cc.Invoke(ctx, "/data.JobStatus/GetJobDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobStatusServer is the server API for JobStatus service.
// All implementations must embed UnimplementedJobStatusServer
// for forward compatibility
type JobStatusServer interface {
	GetJobRunStatus(context.Context, *GetJobRunStatusReq) (*GetJobRunStatusRes, error)
	GetJobRunHistory(context.Context, *GetJobRunHistoryReq) (*GetJobRunHistoryRes, error)
	GetJobDefinition(context.Context, *GetJilReq) (*GetJilRes, error)
	mustEmbedUnimplementedJobStatusServer()
}

// UnimplementedJobStatusServer must be embedded to have forward compatible implementations.
type UnimplementedJobStatusServer struct {
}

func (UnimplementedJobStatusServer) GetJobRunStatus(context.Context, *GetJobRunStatusReq) (*GetJobRunStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRunStatus not implemented")
}
func (UnimplementedJobStatusServer) GetJobRunHistory(context.Context, *GetJobRunHistoryReq) (*GetJobRunHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRunHistory not implemented")
}
func (UnimplementedJobStatusServer) GetJobDefinition(context.Context, *GetJilReq) (*GetJilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDefinition not implemented")
}
func (UnimplementedJobStatusServer) mustEmbedUnimplementedJobStatusServer() {}

// UnsafeJobStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobStatusServer will
// result in compilation errors.
type UnsafeJobStatusServer interface {
	mustEmbedUnimplementedJobStatusServer()
}

func RegisterJobStatusServer(s grpc.ServiceRegistrar, srv JobStatusServer) {
	s.RegisterService(&JobStatus_ServiceDesc, srv)
}

func _JobStatus_GetJobRunStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRunStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStatusServer).GetJobRunStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.JobStatus/GetJobRunStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStatusServer).GetJobRunStatus(ctx, req.(*GetJobRunStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobStatus_GetJobRunHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRunHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStatusServer).GetJobRunHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.JobStatus/GetJobRunHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStatusServer).GetJobRunHistory(ctx, req.(*GetJobRunHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobStatus_GetJobDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJilReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStatusServer).GetJobDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.JobStatus/GetJobDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStatusServer).GetJobDefinition(ctx, req.(*GetJilReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JobStatus_ServiceDesc is the grpc.ServiceDesc for JobStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.JobStatus",
	HandlerType: (*JobStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobRunStatus",
			Handler:    _JobStatus_GetJobRunStatus_Handler,
		},
		{
			MethodName: "GetJobRunHistory",
			Handler:    _JobStatus_GetJobRunHistory_Handler,
		},
		{
			MethodName: "GetJobDefinition",
			Handler:    _JobStatus_GetJobDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "run.proto",
}
