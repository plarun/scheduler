// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobDependsClient is the client API for JobDepends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobDependsClient interface {
	GetJobDepends(ctx context.Context, in *GetJobDependsReq, opts ...grpc.CallOption) (*GetJobDependsRes, error)
	GetNextRun(ctx context.Context, in *GetNextRunReq, opts ...grpc.CallOption) (*GetNextRunRes, error)
}

type jobDependsClient struct {
	cc grpc.ClientConnInterface
}

func NewJobDependsClient(cc grpc.ClientConnInterface) JobDependsClient {
	return &jobDependsClient{cc}
}

func (c *jobDependsClient) GetJobDepends(ctx context.Context, in *GetJobDependsReq, opts ...grpc.CallOption) (*GetJobDependsRes, error) {
	out := new(GetJobDependsRes)
	err := c.cc.Invoke(ctx, "/data.JobDepends/GetJobDepends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDependsClient) GetNextRun(ctx context.Context, in *GetNextRunReq, opts ...grpc.CallOption) (*GetNextRunRes, error) {
	out := new(GetNextRunRes)
	err := c.cc.Invoke(ctx, "/data.JobDepends/GetNextRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobDependsServer is the server API for JobDepends service.
// All implementations must embed UnimplementedJobDependsServer
// for forward compatibility
type JobDependsServer interface {
	GetJobDepends(context.Context, *GetJobDependsReq) (*GetJobDependsRes, error)
	GetNextRun(context.Context, *GetNextRunReq) (*GetNextRunRes, error)
	mustEmbedUnimplementedJobDependsServer()
}

// UnimplementedJobDependsServer must be embedded to have forward compatible implementations.
type UnimplementedJobDependsServer struct {
}

func (UnimplementedJobDependsServer) GetJobDepends(context.Context, *GetJobDependsReq) (*GetJobDependsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDepends not implemented")
}
func (UnimplementedJobDependsServer) GetNextRun(context.Context, *GetNextRunReq) (*GetNextRunRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextRun not implemented")
}
func (UnimplementedJobDependsServer) mustEmbedUnimplementedJobDependsServer() {}

// UnsafeJobDependsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobDependsServer will
// result in compilation errors.
type UnsafeJobDependsServer interface {
	mustEmbedUnimplementedJobDependsServer()
}

func RegisterJobDependsServer(s grpc.ServiceRegistrar, srv JobDependsServer) {
	s.RegisterService(&JobDepends_ServiceDesc, srv)
}

func _JobDepends_GetJobDepends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobDependsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobDependsServer).GetJobDepends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.JobDepends/GetJobDepends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobDependsServer).GetJobDepends(ctx, req.(*GetJobDependsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobDepends_GetNextRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextRunReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobDependsServer).GetNextRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.JobDepends/GetNextRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobDependsServer).GetNextRun(ctx, req.(*GetNextRunReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JobDepends_ServiceDesc is the grpc.ServiceDesc for JobDepends service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobDepends_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.JobDepends",
	HandlerType: (*JobDependsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobDepends",
			Handler:    _JobDepends_GetJobDepends_Handler,
		},
		{
			MethodName: "GetNextRun",
			Handler:    _JobDepends_GetNextRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depend.proto",
}
