// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunDataClient is the client API for RunData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunDataClient interface {
	GetRunData(ctx context.Context, in *RunDataReq, opts ...grpc.CallOption) (*RunDataRes, error)
}

type runDataClient struct {
	cc grpc.ClientConnInterface
}

func NewRunDataClient(cc grpc.ClientConnInterface) RunDataClient {
	return &runDataClient{cc}
}

func (c *runDataClient) GetRunData(ctx context.Context, in *RunDataReq, opts ...grpc.CallOption) (*RunDataRes, error) {
	out := new(RunDataRes)
	err := c.cc.Invoke(ctx, "/data.RunData/GetRunData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunDataServer is the server API for RunData service.
// All implementations must embed UnimplementedRunDataServer
// for forward compatibility
type RunDataServer interface {
	GetRunData(context.Context, *RunDataReq) (*RunDataRes, error)
	mustEmbedUnimplementedRunDataServer()
}

// UnimplementedRunDataServer must be embedded to have forward compatible implementations.
type UnimplementedRunDataServer struct {
}

func (UnimplementedRunDataServer) GetRunData(context.Context, *RunDataReq) (*RunDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunData not implemented")
}
func (UnimplementedRunDataServer) mustEmbedUnimplementedRunDataServer() {}

// UnsafeRunDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunDataServer will
// result in compilation errors.
type UnsafeRunDataServer interface {
	mustEmbedUnimplementedRunDataServer()
}

func RegisterRunDataServer(s grpc.ServiceRegistrar, srv RunDataServer) {
	s.RegisterService(&RunData_ServiceDesc, srv)
}

func _RunData_GetRunData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunDataServer).GetRunData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.RunData/GetRunData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunDataServer).GetRunData(ctx, req.(*RunDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RunData_ServiceDesc is the grpc.ServiceDesc for RunData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.RunData",
	HandlerType: (*RunDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunData",
			Handler:    _RunData_GetRunData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "run.proto",
}
