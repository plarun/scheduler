// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: callback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskExecServiceClient is the client API for TaskExecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskExecServiceClient interface {
	// Submit sends the parsed entities to eventserver
	PullReadyTasks(ctx context.Context, in *ReadyTasksPullRequest, opts ...grpc.CallOption) (*ReadyTasksPullResponse, error)
	GetTask(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoResponse, error)
	SetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error)
}

type taskExecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskExecServiceClient(cc grpc.ClientConnInterface) TaskExecServiceClient {
	return &taskExecServiceClient{cc}
}

func (c *taskExecServiceClient) PullReadyTasks(ctx context.Context, in *ReadyTasksPullRequest, opts ...grpc.CallOption) (*ReadyTasksPullResponse, error) {
	out := new(ReadyTasksPullResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskExecService/PullReadyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecServiceClient) GetTask(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoResponse, error) {
	out := new(TaskInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskExecService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecServiceClient) SetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error) {
	out := new(TaskStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskExecService/SetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskExecServiceServer is the server API for TaskExecService service.
// All implementations must embed UnimplementedTaskExecServiceServer
// for forward compatibility
type TaskExecServiceServer interface {
	// Submit sends the parsed entities to eventserver
	PullReadyTasks(context.Context, *ReadyTasksPullRequest) (*ReadyTasksPullResponse, error)
	GetTask(context.Context, *TaskInfoRequest) (*TaskInfoResponse, error)
	SetTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error)
	mustEmbedUnimplementedTaskExecServiceServer()
}

// UnimplementedTaskExecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskExecServiceServer struct {
}

func (UnimplementedTaskExecServiceServer) PullReadyTasks(context.Context, *ReadyTasksPullRequest) (*ReadyTasksPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullReadyTasks not implemented")
}
func (UnimplementedTaskExecServiceServer) GetTask(context.Context, *TaskInfoRequest) (*TaskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskExecServiceServer) SetTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskStatus not implemented")
}
func (UnimplementedTaskExecServiceServer) mustEmbedUnimplementedTaskExecServiceServer() {}

// UnsafeTaskExecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskExecServiceServer will
// result in compilation errors.
type UnsafeTaskExecServiceServer interface {
	mustEmbedUnimplementedTaskExecServiceServer()
}

func RegisterTaskExecServiceServer(s grpc.ServiceRegistrar, srv TaskExecServiceServer) {
	s.RegisterService(&TaskExecService_ServiceDesc, srv)
}

func _TaskExecService_PullReadyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyTasksPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecServiceServer).PullReadyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskExecService/PullReadyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecServiceServer).PullReadyTasks(ctx, req.(*ReadyTasksPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskExecService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecServiceServer).GetTask(ctx, req.(*TaskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecService_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecServiceServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskExecService/SetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecServiceServer).SetTaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskExecService_ServiceDesc is the grpc.ServiceDesc for TaskExecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskExecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskExecService",
	HandlerType: (*TaskExecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullReadyTasks",
			Handler:    _TaskExecService_PullReadyTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskExecService_GetTask_Handler,
		},
		{
			MethodName: "SetTaskStatus",
			Handler:    _TaskExecService_SetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "callback.proto",
}
