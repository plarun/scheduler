// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: awake.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WaitTaskServiceClient is the client API for WaitTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaitTaskServiceClient interface {
	// Submit sends the parsed entities to eventserver
	Awake(ctx context.Context, in *DependentTaskAwakeRequest, opts ...grpc.CallOption) (*DependentTaskAwakeResponse, error)
}

type waitTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaitTaskServiceClient(cc grpc.ClientConnInterface) WaitTaskServiceClient {
	return &waitTaskServiceClient{cc}
}

func (c *waitTaskServiceClient) Awake(ctx context.Context, in *DependentTaskAwakeRequest, opts ...grpc.CallOption) (*DependentTaskAwakeResponse, error) {
	out := new(DependentTaskAwakeResponse)
	err := c.cc.Invoke(ctx, "/proto.WaitTaskService/Awake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaitTaskServiceServer is the server API for WaitTaskService service.
// All implementations must embed UnimplementedWaitTaskServiceServer
// for forward compatibility
type WaitTaskServiceServer interface {
	// Submit sends the parsed entities to eventserver
	Awake(context.Context, *DependentTaskAwakeRequest) (*DependentTaskAwakeResponse, error)
	mustEmbedUnimplementedWaitTaskServiceServer()
}

// UnimplementedWaitTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWaitTaskServiceServer struct {
}

func (UnimplementedWaitTaskServiceServer) Awake(context.Context, *DependentTaskAwakeRequest) (*DependentTaskAwakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Awake not implemented")
}
func (UnimplementedWaitTaskServiceServer) mustEmbedUnimplementedWaitTaskServiceServer() {}

// UnsafeWaitTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaitTaskServiceServer will
// result in compilation errors.
type UnsafeWaitTaskServiceServer interface {
	mustEmbedUnimplementedWaitTaskServiceServer()
}

func RegisterWaitTaskServiceServer(s grpc.ServiceRegistrar, srv WaitTaskServiceServer) {
	s.RegisterService(&WaitTaskService_ServiceDesc, srv)
}

func _WaitTaskService_Awake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependentTaskAwakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitTaskServiceServer).Awake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WaitTaskService/Awake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitTaskServiceServer).Awake(ctx, req.(*DependentTaskAwakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaitTaskService_ServiceDesc is the grpc.ServiceDesc for WaitTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaitTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WaitTaskService",
	HandlerType: (*WaitTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Awake",
			Handler:    _WaitTaskService_Awake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "awake.proto",
}
